#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <chrono>
#include "picosha2.h"

using namespace std;
using namespace chrono;

// Fonction pour calculer le hash SHA256
string sha256(const string& data) {
    return picosha2::hash256_hex_string(data);
}

// Classe Block pour Proof of Work
class Block {
private:
    int index;
    string previousHash;
    string data;
    long long timestamp;
    int nonce;
    string hash;
    
public:
    Block(int idx, string prevHash, string d) 
        : index(idx), previousHash(prevHash), data(d), nonce(0) {
        timestamp = duration_cast<milliseconds>(
            system_clock::now().time_since_epoch()
        ).count();
        hash = calculateHash();
    }
    
    string calculateHash() const {
        stringstream ss;
        ss << index << previousHash << data << timestamp << nonce;
        return sha256(ss.str());
    }
    
    // Proof of Work : Miner le bloc
    void mineBlock(int difficulty) {
        string target(difficulty, '0');
        
        cout << "\nüî® Mining block " << index << " avec difficult√© " << difficulty << "..." << endl;
        cout << "Recherche d'un hash commen√ßant par: " << target << endl;
        
        auto start = high_resolution_clock::now();
        
        while(hash.substr(0, difficulty) != target) {
            nonce++;
            hash = calculateHash();
            
            // Afficher progression tous les 100000 essais
            if(nonce % 100000 == 0) {
                cout << "  Nonce: " << nonce << " - Hash: " << hash.substr(0, 20) << "..." << endl;
            }
        }
        
        auto end = high_resolution_clock::now();
        auto duration = duration_cast<milliseconds>(end - start);
        
        cout << "‚úÖ Block min√©!" << endl;
        cout << "  Nonce trouv√©: " << nonce << endl;
        cout << "  Hash: " << hash << endl;
        cout << "  Temps d'ex√©cution: " << duration.count() << " ms" << endl;
    }
    
    // Getters
    string getHash() const { return hash; }
    int getIndex() const { return index; }
    int getNonce() const { return nonce; }
    string getPreviousHash() const { return previousHash; }
    string getData() const { return data; }
    
    void display() const {
        cout << "\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << endl;
        cout << "‚îÇ Block #" << index << setw(44) << "‚îÇ" << endl;
        cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << endl;
        cout << "‚îÇ Donn√©es: " << left << setw(42) << data.substr(0, 42) << "‚îÇ" << endl;
        cout << "‚îÇ Hash pr√©c√©dent: " << previousHash.substr(0, 32) << "..." << setw(2) << "‚îÇ" << endl;
        cout << "‚îÇ Hash: " << hash.substr(0, 32) << "..." << setw(15) << "‚îÇ" << endl;
        cout << "‚îÇ Nonce: " << right << setw(44) << nonce << "‚îÇ" << endl;
        cout << "‚îÇ Timestamp: " << setw(40) << timestamp << "‚îÇ" << endl;
        cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << endl;
    }
};

// Classe Blockchain
class Blockchain {
private:
    vector<Block> chain;
    int difficulty;
    
public:
    Blockchain(int diff = 2) : difficulty(diff) {
        // Cr√©er le bloc Genesis
        cout << "\nüîó Cr√©ation de la Blockchain avec difficult√© " << difficulty << endl;
        Block genesis(0, "0", "Genesis Block");
        genesis.mineBlock(difficulty);
        chain.push_back(genesis);
    }
    
    Block getLastBlock() const {
        return chain.back();
    }
    
    void addBlock(string data) {
        Block newBlock(chain.size(), getLastBlock().getHash(), data);
        newBlock.mineBlock(difficulty);
        chain.push_back(newBlock);
    }
    
    bool isChainValid() const {
        for(size_t i = 1; i < chain.size(); i++) {
            const Block& currentBlock = chain[i];
            const Block& previousBlock = chain[i-1];
            
            // V√©rifier que le hash est correct
            if(currentBlock.getHash() != currentBlock.calculateHash()) {
                cout << "‚ùå Hash invalide pour le bloc " << i << endl;
                return false;
            }
            
            // V√©rifier la liaison avec le bloc pr√©c√©dent
            if(currentBlock.getPreviousHash() != previousBlock.getHash()) {
                cout << "‚ùå Cha√Æne bris√©e au bloc " << i << endl;
                return false;
            }
            
            // V√©rifier la difficult√©
            string target(difficulty, '0');
            if(currentBlock.getHash().substr(0, difficulty) != target) {
                cout << "‚ùå Difficult√© non respect√©e pour le bloc " << i << endl;
                return false;
            }
        }
        return true;
    }
    
    void displayChain() const {
        cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
        cout << "‚ïë              CONTENU DE LA BLOCKCHAIN                 ‚ïë" << endl;
        cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
        
        for(const auto& block : chain) {
            block.display();
        }
    }
    
    int getChainLength() const { return chain.size(); }
};

// Test de diff√©rentes difficult√©s
void testDifficulties() {
    cout << "\n\n" << string(70, '=') << endl;
    cout << "TEST : Comparaison des temps de minage selon la difficult√©" << endl;
    cout << string(70, '=') << endl;
    
    vector<int> difficulties = {1, 2, 3, 4, 5};
    vector<long long> times;
    
    for(int diff : difficulties) {
        cout << "\n\n>>> DIFFICULT√â : " << diff << " <<<" << endl;
        
        auto start = high_resolution_clock::now();
        
        Block testBlock(1, "0000000000000000", "Test block");
        testBlock.mineBlock(diff);
        
        auto end = high_resolution_clock::now();
        auto duration = duration_cast<milliseconds>(end - start);
        times.push_back(duration.count());
    }
    
    // Afficher le tableau r√©capitulatif
    cout << "\n\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë         TABLEAU R√âCAPITULATIF DES TEMPS              ‚ïë" << endl;
    cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
    cout << "‚ïë Difficult√© ‚îÇ Temps (ms) ‚îÇ Facteur multiplicatif    ‚ïë" << endl;
    cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
    
    for(size_t i = 0; i < difficulties.size(); i++) {
        cout << "‚ïë " << setw(10) << difficulties[i] << " ‚îÇ ";
        cout << setw(10) << times[i] << " ‚îÇ ";
        if(i == 0) {
            cout << setw(24) << "r√©f√©rence" << " ‚ïë" << endl;
        } else {
            double factor = (double)times[i] / times[0];
            cout << "x" << setw(23) << fixed << setprecision(2) << factor << " ‚ïë" << endl;
        }
    }
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïß‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïß‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
    
    cout << "\nüìä Analyse:" << endl;
    cout << "- Chaque augmentation de difficult√© multiplie le temps par ~16" << endl;
    cout << "- Ceci est d√ª au fait que chaque z√©ro suppl√©mentaire r√©duit" << endl;
    cout << "  les possibilit√©s de 1/16 (car hash en hexad√©cimal)" << endl;
}

int main() {
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë          EXERCICE 2 : PROOF OF WORK (PoW)             ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
    
    // ========== EXEMPLE 1 : Cr√©ation d'une blockchain simple ==========
    cout << "\n\n" << string(60, '=') << endl;
    cout << "EXEMPLE 1 : Cr√©ation d'une blockchain avec PoW" << endl;
    cout << string(60, '=') << endl;
    
    Blockchain blockchain(3);
    
    blockchain.addBlock("Transaction: Alice -> Bob 100‚Ç¨");
    blockchain.addBlock("Transaction: Bob -> Charlie 50‚Ç¨");
    blockchain.addBlock("Transaction: Charlie -> Dave 25‚Ç¨");
    
    blockchain.displayChain();
    
    // V√©rifier l'int√©grit√©
    cout << "\n\n" << string(60, '=') << endl;
    cout << "V√©rification de l'int√©grit√© de la blockchain" << endl;
    cout << string(60, '=') << endl;
    cout << (blockchain.isChainValid() ? "‚úÖ La blockchain est VALIDE" : "‚ùå La blockchain est INVALIDE") << endl;
    
    // ========== EXEMPLE 2 : Test des diff√©rentes difficult√©s ==========
    testDifficulties();
    
    cout << "\n\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë            FIN DE L'EXERCICE 2                         ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n" << endl;
    
    return 0;
}
